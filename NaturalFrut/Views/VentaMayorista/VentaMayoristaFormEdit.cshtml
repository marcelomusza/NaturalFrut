@model NaturalFrut.Models.VentaMayorista
@{
    ViewBag.Title = "Editar Venta";
    Layout = "~/Views/Shared/_Layout.cshtml";
}



<h2>Editar Venta</h2>

<form id="vtamayform">

    <div class="row">

        <!--Agrupamos campos de la columna izquierda-->
        <div class="col-sm-6">

            <div class="form-group">
                <label>N° Venta</label>
                <input id="numeroventa" name="numeroventa" required type="text" value="@Model.NumeroVenta" class="form-control" disabled />
            </div>

            <div class="form-group">
                <label>Fecha</label>
                <input id="fecha" name="fecha" required type="datetime" value="@Model.Fecha" class="form-control" disabled />
            </div>

            @*<div class="form-group">
                    <label>Cliente</label>
                    <div class="tt-container vtamay-cliente">
                        <input id="cliente" name="cliente" data-msg-required="Por favor ingresa un Cliente" data-cliente-id="" required type="text" value="" onblur="GetSaldoCliente();" class="form-control" />
                        <a href="#" onclick="NuevoClienteModal(0)"><img src="~/Content/Images/addSign.png" title="Ingresar Nuevo Cliente" /></a>


                    </div>
                </div>*@

            <div class="form-group">
                <label>Cliente</label>
                <div class="tt-container vtamay-cliente">
                    <input id="cliente" name="cliente" data-msg-required="Por favor ingresa un Cliente" data-cliente-id="@Model.ClienteID" required type="text" value="@Model.Cliente.Nombre" class="form-control" disabled />
                </div>
            </div>

            @*<div class="form-group">
                        <label>Vendedor</label>
                        <div style="display:flex;">
                            <select id="vendedor" name="vendedor" class="form-control" data-msg-required="Por favor ingresa un Vendedor" required>
                                <option value="" selected="selected">Seleccione...</option>
                                @foreach (var vendedor in @ViewBag.Vendedores)
                        {
                            <option value="@vendedor.ID">@vendedor.Nombre</option>
                }
                            </select>&nbsp;&nbsp;
                            <a href="#" onclick="NuevoVendedorModal(0)"><img src="~/Content/Images/addSign.png" style="vertical-align:-webkit-baseline-middle;" title="Ingresar Nuevo Vendedor" /></a>
                        </div>
                        <label class="error field-validation-valid" for="vendedor" data-valmsg-replace="true"></label>

                    </div>*@

            <div class="form-group">
                <label>Vendedor</label>
                <input id="vendedor" name="vendedor" type="text" value="@Model.Vendedor.Nombre" data-vendedor-id="@Model.VendedorID" class="form-control" disabled />
            </div>

        </div>

        <!--Agrupamos campos de la columna derecha-->
        <div class="col-sm-6">

            <div class="form-group">
                <label>Entrega Efectivo</label>
                <input id="entregaefectivo" name="entregaefectivo" required type="text" value="0" onkeyup="ValidarPunto(this);" onblur="CalcularSaldoFinal();" class="form-control" />
            </div>

            <div class="form-group">
                <label>Saldo</label>
                <input id="saldo" name="saldo" type="text" value="@Model.Cliente.Saldo" class="form-control" disabled />
            </div>

            <div class="form-group">
                <label>Nuevo Saldo</label>
                <input id="nuevosaldo" name="nuevosaldo" type="text" value="" class="form-control js-formatvalue" disabled />
            </div>

            <div class="checkbox">

                @{
            if (Model.NoConcretado)
            {
                <input id="noconcretado" name="noconcretado" type="checkbox" value="" checked />
    }
    else
    {
        <input id="noconcretado" name="noconcretado" type="checkbox" value="" />
}
                }
                <label><strong>No Concretado</strong></label>

            </div>

            <div class="checkbox">

                @{
            if (Model.Facturado)
            {
                <input id="facturado" name="facturado" type="checkbox" value="" checked />
    }
    else
    {
        <input id="facturado" name="facturado" type="checkbox" value="" />
}
                }
                <label><strong>Venta Facturada?</strong></label>

            </div>

        </div>

    </div>

    <div class="row">
        <div class="col-sm-12">
            <h3>Productos</h3>
        </div>
    </div>

    <div class="row">
        <div class="col-sm-12">

            <table class="table-bordered table-hover table order-list">
                <thead>
                    <tr>
                        <th>Producto</th>
                        <th>Cantidad</th>
                        <th>Unidad</th>
                        <th>Descuento (%)</th>
                        <th>Importe</th>
                        <th>Total Importe</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody class="listaproductos">
                    @{ int counter = 0;}
                    @foreach (var producto in Model.ProductosXVenta)
                    {
                        <tr>
                            <td><div class="tt-container"><input id="@String.Format("producto{0}", counter)" name="producto" data-msg-required="Por favor ingresa un Producto" data-producto-id="@producto.ProductoID" required type="text" data-js-counter="@counter" value="@producto.Producto.Nombre" onChange="ValidarTipoDeProducto(@counter); " class="form-control" disabled /></div></td>
                            <td><div class="form-group"><input id="@String.Format("cantidad{0}", counter)" name="cantidad" data-msg-required="Por favor ingresa una Cantidad" required type="number" value="@producto.Cantidad" class="form-control" data-js-counter="@counter" onBlur="ResetearValores(this); CalcularValoresSegunTipoProducto(@counter, '@producto.Producto.EsBlister.ToString()');" disabled /><label id="@String.Format("stockdisponible{0}", counter)"></label></div></td>
                            <td><div class="form-group"><select id="@String.Format("tiposdeunidad{0}", counter)" name="tiposdeunidad" data-msg-required="Por favor ingresa una Unidad" class="form-control" onblur="ValidarTipoDeProducto(@counter);" disabled required><option value="@producto.TipoDeUnidadID">@producto.TipoDeUnidad.Nombre</option></select></div></td>
                            <td><div class="form-group"><input id="@String.Format("descprod{0}", counter)" name="descprod" type="number" data-js-counter="@counter" value="@producto.Descuento" class="js-descprod form-control" disabled/></div></td>
                            <td><div class="form-group"><input id="@String.Format("importe{0}", counter)" name="importe" required type="text" value="@producto.Importe.ToString().Replace(',','.')" class="importe form-control" disabled /></div></td>
                            <td><div class="form-group"><input id="@String.Format("totalimporte{0}", counter)" name="totalimporte" required type="text" data-js-counter="@counter" value="@producto.Total.ToString().Replace(',','.')" class="totalimporte js-prodexistente form-control" disabled /></div></td>
                            <td><input type="button" class="ibtnDel btn btn-md btn-danger " id="@counter" name="@counter" value="Borrar">
                            <input type="hidden" name="prodxventaid" value="@producto.ID"/>
                            </td>
                        </tr>
                            counter++;
                    }

                </tbody>
                <tfoot>
                    <tr>
                        <td colspan="5" style="text-align: left;">
                            <input type="button" class="btn btn-lg btn-block " id="addrow" value="Agregar Producto" />
                        </td>
                        <td colspan="2" style="text-align: right;">
                            <input type="button" class="btn btn-lg btn-primary btn-block" id="calculartotal" value="Calcular Total" />
                        </td>
                    </tr>
                    <tr>
                        <td colspan="7" style="text-align: right;">
                            &nbsp;
                            <label>Descuento:</label>
                            <select id="tipoDescuento" name="tipoDescuento" class="form-control vtamay-tipodescuento">
                                <option value="0" selected="selected">...</option>
                                <option value="1">$</option>
                                <option value="2">%</option>
                            </select>
                            <input type="text" class="form-control vtamay-descuento" id="descuento" value="@Model.Descuento" onkeyup="ValidarPunto(this);" />
                            <br /><br />
                            <label>Total Venta:</label>
                            <input type="text" class="form-control vtamay-totalventa" id="totalventa" value="" disabled />
                            
                        </td>
                    </tr>
                </tfoot>
            </table>

        </div>
    </div>

    <div class="row">
        <div class="col-sm-12">

            @Html.AntiForgeryToken()
            <input type="hidden" id="totalventaanterior" value="@Model.SumaTotal" />
            <input type="hidden" id="tipodescuentoanterior" value="@Model.TipoDescuentoTotal" />
            <input type="hidden" id="descuentoanterior" value="@Model.Descuento" />
            <button type="submit" class="btn btn-primary">Actualizar Venta</button>
            <button type="button" class="btn btn-danger" value="Cancelar" onclick="location.href='@Url.Action("Index", "Home")';">Cancelar</button>

        </div>
    </div>


</form>


@section scripts
{

    @Scripts.Render("~/bundles/jqueryval")    

<script>

        $(document).ready(function () {

            //Inicializamos typeahead para los productos existentes
            $("input[name='producto']").each(function () {

                var input = $(this);
                var cont = input.attr("data-js-counter");
                typeahead_initialize(cont);

            });

            //ViewModel para pasar al webAPI
            var vm = {
                ID: 0,
                fecha: "",
                clienteID: 0,
                vendedorID: 0,
                numeroVenta: 0,
                noConcretado: false,
                facturado: false,
                sumaTotal: 0,
                tipoDescuentoTotal: 0,
                descuento: 0,
                saldo: 0,
                nuevoSaldo: 0,
                entregaEfectivo: 0,
                productosXVenta: []
            };

            var vm2 = [];

            var descuentoAplicado = false;
            var descuentoAplicadoPorProducto = false;

            CargarValoresInicialesEnVM(vm);
            GetSaldoCliente();
            FormatearEntregaEfectivo();
            FormatearImportesExistentes();
            CargarTipoDescuento();
            CargarSumaTotal();


            //**EVENTOS START **//

            $("#cliente").validate({
                rules: {
                    cliente: "required",
                },
                messages: {
                    cliente: "Por favor ingresa un Cliente",
                },

            });

            var counter = @counter; //Continuamos con la numeracion segun el contador de la tabla de productos
            $("#addrow").on("click", function () {
                //RecalcularTotal();
                ResetearDescuentoTotal();
                ResetearTotal();

                var validarCliente = $("#cliente").valid();

                if (validarCliente) {

                    var newRow = $("<tr class='productosnuevos'>");
                    var cols = "";

                    cols += '<td><div class="tt-container"><input id="producto' + counter + '" name="producto" data-msg-required="Por favor ingresa un Producto" data-producto-id="" required type="text" value="" onChange="ValidarTipoDeProducto(' + counter + '); " class="form-control" /></div></td>';

                    cols += '<td><div class="form-group"><input id="cantidad' + counter + '" name="cantidad" data-msg-required="Por favor ingresa una Cantidad" required type="number" value="" class="form-control" data-js-counter="' + counter + '" onBlur="ResetearValores(this); CalcularValoresBlister(' + counter + ');" /><label id="stockdisponible' + counter + '" ></label></div></td>';

                    cols += '<td><div class="form-group"><select id="tiposdeunidad' + counter + '" name="tiposdeunidad" data-msg-required="Por favor ingresa una Unidad" class="form-control" onChange="CalcularStockYValorProducto(' + counter + '); " required ><option value="-1" >Seleccione...</option></select></div></td>';
                    //GetTiposDeUnidadDynamic(counter);

                    cols += '<td><div class="form-group"><input id="descprod' + counter + '" name="descprod" type="number" data-js-counter="' + counter + '" value="" class="js-descprod form-control" onkeyup="ValidarPunto(this);" /></div></td>';

                    cols += '<td><div class="form-group"><input id="importe' + counter + '" name="importe" required type="text" value="" class="form-control" disabled /></div></td>';

                    cols += '<td><div class="form-group"><input id="totalimporte' + counter + '" name="totalimporte" required type="text" data-js-counter="' + counter + '" value=""  class="totalimporte form-control js-sumaparaentregaefvo"  disabled /></div></td>';

                    cols += '<td><input type="button" class="ibtnDel btn btn-md btn-danger " id= "' + counter + '" name= "' + counter + '"  value="Borrar"></td>';
                    newRow.append(cols);
                    $("table.order-list").append(newRow);

                    typeahead_initialize(counter);

                    counter++;

                    $("#producto" + counter).validate({
                        rules: {
                            producto: "required",
                        },
                        messages: {
                            producto: "Por favor ingresa un Producto",
                        },

                    });

                    $("#cantidad" + counter).validate({
                        rules: {
                            cantidad: "required",
                        },
                        messages: {
                            cantidad: "Por favor ingresa una Cantidad",
                        },

                    });

                    $("#tiposdeunidad" + counter).validate({
                        rules: {
                            tiposdeunidad: "required",
                        },
                        messages: {
                            tiposdeunidad: "Por favor ingresa una Unidad",
                        },

                    });

                }

            });

            $("table.order-list").on("click", ".ibtnDel", function (event) {

                var button = $(this);
                var productoID = $("#producto" + parseInt(button.context.id)).attr("data-producto-id");
                var ventaID = @ViewBag.VentaMayoristaID;
                var valor = parseInt(this.attributes.name.value);

                var model = {
                    "productoID": productoID,
                    "ventaID": ventaID
                };

                bootbox.confirm("¿Estas seguro de querer borrar el producto?", function (result) {


                    if (result) {

                        if (productoID != "") {

                            //Borramos la fila con datos
                            $.ajax({
                                url: "/api/ventasmayorista/",
                                method: "DELETE",
                                data: model,
                                success: function () {

                                    toastr.success("Producto eliminado satisfactoriamente de la venta");

                                    button.closest("tr").remove();

                                    valor += 1;

                                    if (valor == counter) {
                                        counter -= 1;
                                    } else {
                                        counter += 1;
                                    }

                                    typeahead_initialize(counter);

                                    //RecalcularTotal();
                                    ResetearDescuentoTotal();
                                    ResetearTotal();
                                    //CalcularSaldoFinal();

                                    location.reload();
                                },
                                error: function () {
                                    toastr.error("Error al borrar el producto, consulte con el administrator");
                                }
                            });
                        }
                        else {
                            //Borramos la fila vacia
                            button.closest("tr").remove();

                            valor += 1;

                            if (valor == counter) {
                                counter -= 1;
                            } else {
                                counter += 1;
                            }

                            typeahead_initialize(counter);

                            //RecalcularTotal();
                            ResetearDescuentoTotal();
                            ResetearTotal();
                                    //CalcularSaldoFinal();
                        }


                        
                    }


                });

            });


            $("#tipoDescuento").on('change', function () {

                //Seleccion = 1 ---> $
                //Seleccion = 2 ---> %
                var seleccion = $("#tipoDescuento").val();

                if (seleccion == 1 || seleccion == 2) {
                    $("#descuento").removeAttr("disabled");

                    descuentoAplicado = false;
                    $("#descuento").val("");
                }
                else {
                    $("#descuento").attr("disabled", "disabled");
                    $("#descuento").val("");

                    RecalcularTotal();
                    CalcularDescuentoTotal();
                    CalcularSaldoFinal();
                }

            })

            //$("#descuento").on('blur', function () {

            //    CalcularDescuentoTotal();

            //})

            $("#noconcretado").on('change', function () {
                if (this.checked) {
                    vm.noConcretado = true;
                }
                else {
                    vm.noConcretado = false;
                }


            })

            $("#facturado").on('change', function () {
                if (this.checked) {
                    vm.facturado = true;
                }
                else {
                    vm.facturado = false;
                }


            })

            $("#entregaefectivo").on('change', function () {

                var valor = this.value;
                valor = DeFormatearEntregaEfectivo(valor);
                $("#entregaefectivo").val(FormatearValor(valor));

            })

            //DESCUENTO POR PRODUCTO
            $(document).on('blur', "input.js-descprod", function () {

                //Si el Descuento Final esta activado, desactivarlo
                //var selDescFinal = $("#tipoDescuento").val();
                //if (selDescFinal != "") {
                //    $("#descuento").attr("disabled", "disabled");
                //    $("#descuento").val("");
                //    $('#tipoDescuento option:first').prop('selected', true);
                //}

                var input = $(this);
                var descuento = input[0].value;

                var counter = input.attr("data-js-counter");
                var cantidad = $("#cantidad" + counter).val();
                var importe = $("#importe" + counter).val();

                if (descuento != "") {

                    var importeTotal = cantidad * DeFormatearValor(importe);

                    var importeConDesc = importeTotal - ((importeTotal * descuento) / 100);
                    $("#totalimporte" + counter).val(FormatearValor(importeConDesc));

                    //RecalcularTotal();
                    //CalcularSaldoFinal();

                }
                else {

                    var importeTotal = cantidad * DeFormatearValor(importe);
                    $("#totalimporte" + counter).val(FormatearValor(importeTotal));

                    //RecalcularTotal();
                    //CalcularSaldoFinal();
                }


            });

            $("#calculartotal").on('click', function () {

                //Una vez cargados todos los productos, calculamos total
                RecalcularTotal();
                CalcularDescuentoTotal();
                CalcularSaldoFinal();

            })

            //**EVENTOS END **//

            // Autocomplete para Cliente
            var clientes = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('Nombre'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                prefetch: {
                    url: '/api/clientes?query=%QUERY',
                    wildcard: '%QUERY',
                    cache: false
                }
            });

            $('#cliente').typeahead({
                minLength: 1,
                highlight: true,
                hint: true,
                limit: Infinity
            }, {
                    name: 'cliente',
                    display: 'Nombre',
                    source: clientes
                }).on("typeahead:select", function (e, cliente) {

                    $("#cliente").attr("data-cliente-id", cliente.ID);
                    vm.clienteID = cliente.ID;

                });


            var validator = $("#vtamayform").validate({

                submitHandler: function () {

                    var validarProducto = $('input[name*="producto"]').valid();
                    var validarCantidad = $('input[name*="cantidad"]').valid();
                    var validartipodeUnidad = $('select[name*="tiposdeunidad"]').valid();

                    if (validarProducto && validarCantidad && validartipodeUnidad) {

                        //Modal para aceptacion de venta
                        bootbox.confirm("Estas seguro que deseas actualizar la venta?", function (result) {

                            if (result) {

                                CargarProductosAlVM(vm, vm2);

                                var model = {
                                    "ventaMayorista": vm,
                                    "productosXVenta": vm2
                                };


                                $.ajax({
                                    url: "/api/ventasmayorista",
                                    method: "put",
                                    data: model
                                })
                                    .done(function () {

                                        toastr.success("La venta se ha actualizado correctamente.");

                                        setTimeout(function () {
                                            window.location.href = "/VentaMayorista";
                                        }, 4000);

                                    })
                                    .fail(function () {
                                        toastr.error("Se ha producido un error al guardar la venta, revise los datos a ingresar...");
                                    });

                            }

                        });

                    }

                    return false;
                }
            });

        });

</script>

    <!-- FUNCIONES -->
    <script>
       
        function typeahead_initialize(counter) {


            //Inicializacion necesaria para typeahead dinamicos
            var clienteID = $("#cliente").attr("data-cliente-id");

            var productos = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('Nombre'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                prefetch: {
                    url: 'api/productos/ProductosXLista?clienteID=' + clienteID,
                    cache: false
                }
            });

            $('#producto' + counter).typeahead({
                minLength: 1,
                highlight: true,
                hint: true,
                limit: Infinity
            }, {
                    name: 'producto',
                    display: 'Nombre',
                    source: productos
                }).on("typeahead:select", function (e, producto) {

                    $("#producto" + counter).attr("data-producto-id", producto.ID);

                });

        }

        function GetSaldoCliente() {

            var clienteID = $("#cliente").attr("data-cliente-id");

            if (clienteID != "") {
                $.getJSON("/VentaMayorista/GetSaldoClienteAsync", { ClienteID: clienteID }, ActualizarSaldoCliente)
                    .error(function (xhr, textStatus, exceptionThrown) {
                        bootbox.alert(xhr.responseText);
                    })
            }

        }

        ActualizarSaldoCliente = function (data) {

            if (data.Saldo != 0) {
                $("#saldo").val(data.Saldo);
                $("#nuevosaldo").val(data.Saldo);
            }          

            //RecalcularTotal();
            //CalcularSaldoFinal();
            //CalcularDescuentoTotal();

            $("#saldo").val(FormatearValor($("#saldo").val()));
            $("#nuevosaldo").val(FormatearValor($("#nuevosaldo").val()));

        }

        function CalcularStockYValorProducto(counter) {

            var validarProducto = $("#producto" + counter).valid();
            var validarCantidad = $("#cantidad" + counter).valid();

            if (validarProducto && validarCantidad) {

                var clienteID = $("#cliente").attr("data-cliente-id");
                var productoID = $("#producto" + counter).attr("data-producto-id");
                var cantidad = $("#cantidad" + counter).val();
                var tipoUnidadID = $("#tiposdeunidad" + counter + " option:selected").val();

                if (tipoUnidadID > 0) {
                    $.getJSON("/VentaMayorista/CalcularStockYValorProductoAsync", { ClienteID: clienteID, ProductoID: productoID, Cantidad: cantidad, TipoUnidadID: tipoUnidadID, Counter: counter }, ActualizarValores)
                        .error(function (xhr, textStatus, exceptionThrown) {
                            bootbox.alert(xhr.responseText);
                        })
                }




            }



        }

        ActualizarValores = function (data) {


            if (data.Success) {

                var importe = data.Importe;
                var importeTotal = data.ImporteTotal;
                //var sumaVentaTotal = 0;

                var cantidad = $("#cantidad" + data.Counter).val();
                if (data.Stock - cantidad < 0) {
                    $("#stockdisponible" + data.Counter).text("Stock Disponible: " + data.Stock);
                    $("#stockdisponible" + data.Counter).css("color", "red");
                }
                else {
                    $("#stockdisponible" + data.Counter).text("Stock Disponible: " + data.Stock);
                    $("#stockdisponible" + data.Counter).css("color", "green");
                }

                $("#importe" + data.Counter).val(FormatearValor(importe));
                $("#totalimporte" + data.Counter).val(FormatearValor(importeTotal));

                //RecalcularTotal();
                //CalcularSaldoFinal();

            }
            else {
                bootbox.alert(data.Error);
            }



        }

        function ResetearDescuentoTotal() {

            //Si se agrega o remueve un row, resetear el descuento total
            //$("#tipoDescuento").prop("selectedIndex", 0).change();
            //$("#descuento").attr("disabled", "disabled");
            //$("#descuento").val("");

            //CalcularSaldoFinal();

        }
                
        function RecalcularTotal() {

            var sumaVentaTotal = 0;

            $(".totalimporte").each(function () {
                sumaVentaTotal += parseFloat(DeFormatearValor(this.value));
            });

            $("#totalventa").val(FormatearValor(sumaVentaTotal));


        }

        function GetTiposDeUnidadDynamic(counter) {

            $.getJSON("/VentaMayorista/GetTiposDeUnidadDynamicAsync", { Counter: counter }, PopulateTiposDeUnidadDynamic)
                .error(function (request, textStatus, errorThrown) { alert(errorThrown); })

        }

        PopulateTiposDeUnidadDynamic = function (data) {

            $.each(data.TiposDeUnidad, function () {
                $("#tiposdeunidad" + data.Counter).append($("<option />").val(this.ID).text(this.Nombre));
            });

            //Si el Descuento Final esta activado, desactivarlo
            //var selDescFinal = $("#tipoDescuento").val();
            //if (selDescFinal != "") {
            //    $("#descuento").attr("disabled", "disabled");
            //    $("#descuento").val("");
            //    $('#tipoDescuento option:first').prop('selected', true);
            //}


        }

        function ResetearValores(txtbox) {

            var input = $(txtbox);
            var counter = input.attr("data-js-counter");

            $("#tiposdeunidad" + counter).prop('selectedIndex', 0);
            $("#descprod" + counter).val("");
            $("#importe" + counter).val("");
            $("#totalimporte" + counter).val("");


        }

        function CargarValoresInicialesEnVM(vm) {

            var numeroventa = $("#numeroventa").val();
            var fecha = $("#fecha").val();

            vm.numeroVenta = numeroventa;
            vm.fecha = fecha;
        }

        function CargarProductosAlVM(vm, vm2) {

            //Cargamos la lista de productos
            $(".listaproductos tr").each(function (i, row) {

                var $row = $(row),
                    $producto = $row.find('input[name*="producto"]'),
                    $cantidad = $row.find('input[name*="cantidad"]'),
                    $tipodeunidad = $row.find('select[name*="tiposdeunidad"]'),
                    $descuento = $row.find('input[name*="descprod"]'),
                    $importe = $row.find('input[name*="importe"]'),
                    $totalimporte = $row.find('input[name*="totalimporte"]');
                    $prodxventaid = $row.find('input[name*="prodxventaid"]');

                var productoid = $producto.attr("data-producto-id");
                var cantidad = $cantidad.val();
                var tipodeunidad = $tipodeunidad.val();
                var descuento = $descuento.val();
                var importe = DeFormatearValor($importe.val());
                var totalimporte = DeFormatearValor($totalimporte.val());
                var prodxventaid = $prodxventaid.val();

                vm.productosXVenta.push(
                    {
                        ID: prodxventaid,
                        VentaID: @ViewBag.VentaMayoristaID,
                        ProductoID: productoid,
                        Cantidad: cantidad,
                        TipoDeUnidadID: tipodeunidad,
                        Descuento: descuento,
                        Importe: importe,
                        Total: totalimporte
                    }
                );

                

            });

            //Productos Nuevos
            $(".productosnuevos").each(function (i, row) {

                var $row = $(row),
                    $producto = $row.find('input[name*="producto"]'),
                    $cantidad = $row.find('input[name*="cantidad"]'),
                    $tipodeunidad = $row.find('select[name*="tiposdeunidad"]'),
                    $descuento = $row.find('input[name*="descprod"]'),
                    $importe = $row.find('input[name*="importe"]'),
                    $totalimporte = $row.find('input[name*="totalimporte"]');
                $prodxventaid = $row.find('input[name*="prodxventaid"]');

                var productoid = $producto.attr("data-producto-id");
                var cantidad = $cantidad.val();
                var tipodeunidad = $tipodeunidad.val();
                var descuento = $descuento.val();
                var importe = DeFormatearValor($importe.val());
                var totalimporte = DeFormatearValor($totalimporte.val());
                var prodxventaid = $prodxventaid.val();

                vm2.push(
                    {
                        ProductoID: productoid,
                        Cantidad: cantidad,
                        TipoDeUnidadID: tipodeunidad,
                        VentaID: @ViewBag.VentaMayoristaID,
                        Descuento: descuento,
                        Importe: importe,
                        Total: totalimporte
                    }
                );



            });


            

            //Cargamos el resto de los datos
            vm.ID = @ViewBag.VentaMayoristaID;
            vm.clienteID = $("#cliente").attr("data-cliente-id");
            vm.vendedorID = $("#vendedor").attr("data-vendedor-id");
            vm.entregaEfectivo = DeFormatearValor($("#entregaefectivo").val());
            vm.tipoDescuentoTotal = $("#tipoDescuento").val();
            vm.descuento = DeFormatearValor($("#descuento").val());
            vm.saldo = DeFormatearValor($("#saldo").val());
            vm.nuevoSaldo = DeFormatearValor($("#nuevosaldo").val());
            vm.sumaTotal = DeFormatearValor($("#totalventa").val());     

        }

        function ValidarTipoDeProducto(counter) {

            var productoID = $("#producto" + counter).attr("data-producto-id");

            if (productoID > 0) {
                $.getJSON("/VentaMayorista/ValidarTipoDeProductoAsync", { ProductoID : productoID, Counter: counter }, PopulateTipoDeUnidadSegunProducto)
                    .error(function (xhr, textStatus, exceptionThrown) {
                        bootbox.alert(xhr.responseText);
                    })
            }

        }

        PopulateTipoDeUnidadSegunProducto = function (data) {

            if (data.EsBlister) {
                $("#tiposdeunidad" + data.Counter).empty();
                $("#tiposdeunidad" + data.Counter).append($("<option />").val("-1").text("Seleccione..."));
                $("#tiposdeunidad" + data.Counter).append($("<option />").val("@ViewBag.TipoDeUnidadBlister").text("Blister..."));
                                
            }
            else if(data.EsMix) {
                $("#tiposdeunidad" + data.Counter).empty();
                $("#tiposdeunidad" + data.Counter).append($("<option />").val("-1").text("Seleccione..."));
                $("#tiposdeunidad" + data.Counter).append($("<option />").val("@ViewBag.TipoDeUnidadMix").text("Kg."));
               
            }
            else {
                $("#tiposdeunidad" + data.Counter).empty();
                $("#tiposdeunidad" + data.Counter).append($("<option />").val("-1").text("Seleccione..."));
                GetTiposDeUnidadDynamic(data.Counter);
                
            }

        }

        UpdateStockBlister = function (data) {

            if (data.Success) {

                var cantidad = $("#cantidad" + data.Counter).val();
                if (data.Stock - cantidad < 0) {
                    $("#stockdisponible" + data.Counter).text("Stock Disponible: " + data.Stock);
                    $("#stockdisponible" + data.Counter).css("color", "red");
                }
                else {
                    $("#stockdisponible" + data.Counter).text("Stock Disponible: " + data.Stock);
                    $("#stockdisponible" + data.Counter).css("color", "green");
                }

            }
            else {
                bootbox.alert(data.Error);
            }

        }

        function CalcularValoresBlister(counter) {

            var validarProducto = $("#producto" + counter).valid();
            var validarCantidad = $("#cantidad" + counter).valid();

            if (validarProducto && validarCantidad) {

                var clienteID = $("#cliente").attr("data-cliente-id");
                var productoID = $("#producto" + counter).attr("data-producto-id");
                var cantidad = $("#cantidad" + counter).val();
                var tipoUnidadID = $("#tiposdeunidad" + counter + " option:selected").val();

                if (tipoUnidadID > 0) {
                    $.getJSON("/VentaMayorista/CalcularValorBlisterAsync", { ClienteID: clienteID, ProductoID: productoID, Cantidad: cantidad, TipoUnidadID: tipoUnidadID, Counter: counter }, ActualizarValores)
                        .error(function (xhr, textStatus, exceptionThrown) {
                            bootbox.alert(xhr.responseText);
                        })
                }

            }


        }

        function CalcularValoresSegunTipoProducto(counter, esBlister) {

            //Aplica solo para productos existentes del listado, para diferenciar cual es Blister y Cual no

            if (esBlister.toLowerCase() == "True")
                CalcularValoresBlister(counter);
            else
                CalcularStockYValorProducto(counter);
        }

        function FormatearValor(valor) {

            var formatter = new Intl.NumberFormat('es-AR', {
                style: 'currency',
                currency: 'ARS',
                //minimumFractionDigits: 2,
                // the default value for minimumFractionDigits depends on the currency
                // and is usually already 2
            });

            valor = formatter.format(valor);

            return valor;

        }

        function DeFormatearValor(valor) {

            if (valor.indexOf("$") != -1 || $("#descuento").val() != "") {
                valor = valor.replace("$", "").trim();
                valor = ValorANumero(valor);
            }

            return valor;
        }

        function DeFormatearEntregaEfectivo(valor) {

            if (valor != "") {
                valor = valor.replace("$", "").trim();
                valor = ValorANumero(valor);
            }

            return valor;
        }

        function DeFormatearSaldo(valor) {

            if (valor != "") {
                valor = valor.replace("$", "").trim();
                valor = ValorANumero(valor);
            }

            return valor;
        }

        function ValidarPunto(textbox) {

            var word = ["."];

            for (i = 0; i < word.length; i++) {
                if (textbox.value.indexOf(word[i]) >= 0) {
                    $("#" + textbox.id).val($("#" + textbox.id).val().replace(".", ","));
                }                
            }

        }

        function FormatearEntregaEfectivo() {

            var valor = $("#entregaefectivo").val();
            valor = DeFormatearEntregaEfectivo(valor);
            $("#entregaefectivo").val(FormatearValor(valor));
        }

        function CalcularSaldoFinal() {

            var totalVentaAnterior = DeFormatearEntregaEfectivo($("#totalventaanterior").val());
            var entregaEfvo = DeFormatearEntregaEfectivo($("#entregaefectivo").val());
            var sumaTotal = DeFormatearEntregaEfectivo($("#totalventa").val());
            var saldo = DeFormatearEntregaEfectivo($("#saldo").val());
            //var totalVentaMasSaldo = DeFormatearEntregaEfectivo($("#totalventamassaldo").val());

            $("#nuevosaldo").val(FormatearValor(parseFloat(sumaTotal) - parseFloat(totalVentaAnterior) + parseFloat(saldo) - parseFloat(entregaEfvo)));

        }

        function ResetearSaldo() {
           
            var saldo = DeFormatearEntregaEfectivo($("#saldo").val());
            $("#nuevosaldo").val(FormatearValor(parseFloat(saldo)));

        }

        function ResetearTotal() {

            var saldo = $("#saldo").val();

            $("#totalventa").val(FormatearValor(0));
            $("#nuevosaldo").val(saldo);
        }

        function CalcularDescuentoTotal() {

            var sumaParcialConDesc = 0;
            var sumaParcialSinDesc = 0;

            //Seleccion = 1 ---> $
            //Seleccion = 2 ---> %
            var seleccion = $("#tipoDescuento").val();

            if ((seleccion == 1 || seleccion == 2) && $("#descuento").val() != "") {

                var sumaVentaTotal = 0;
                var nuevoTotal = 0;
                var saldo = DeFormatearValor($("#saldo").val());

                $(".totalimporte").each(function () {

                    var descuento = $(this).closest('tr').find('td .js-descprod').val();

                    if (descuento != "") {
                        sumaParcialConDesc += parseFloat(DeFormatearValor(this.value));
                    }
                    else {
                        sumaParcialSinDesc += parseFloat(DeFormatearValor(this.value));
                    }

                    //sumaVentaTotal += parseFloat(this.value);
                });

                var descuento = parseFloat(DeFormatearValor($("#descuento").val()));

                if (seleccion == 1 && sumaParcialSinDesc != 0)
                    nuevoTotal = sumaParcialSinDesc - descuento;
                else
                    nuevoTotal = sumaParcialSinDesc - ((sumaParcialSinDesc * descuento) / 100);

                nuevoTotal = nuevoTotal + sumaParcialConDesc;

                var nuevoTotalsinSaldo = FormatearValor(nuevoTotal);
                $("#totalventa").val(nuevoTotalsinSaldo);

                //CalcularSaldoFinal();
            }
            else {

                if ($("#descuento").val() != "") {
                    $("#descuento").attr("disabled", "disabled");
                    $("#descuento").val("");
                }

            }

        }

        function CargarTipoDescuento() {

            var tipoDescAnterior = $("#tipodescuentoanterior").val();
            $("#tipoDescuento").prop("selectedIndex", parseInt(tipoDescAnterior)).change();
            
        }

        function CargarSumaTotal() {

            var totalAnterior = ValorANumero($("#totalventaanterior").val());
            $("#totalventa").val(FormatearValor(totalAnterior));
        }

        function FormatearImportesExistentes() {

            //Formateamos los valores de los productos existentes de la venta
            $(".totalimporte").each(function () {

                $(this).val(FormatearValor(this.value));
            });

            $(".importe").each(function () {

                $(this).val(FormatearValor(this.value));
            });

        }

    </script>

}
