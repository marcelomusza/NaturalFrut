@model NaturalFrut.Models.VentaMayorista
@{
    ViewBag.Title = "Editar Venta";
    Layout = "~/Views/Shared/_Layout.cshtml";
}



<h2>Editar Venta</h2>

<form id="vtamayform">

    <div class="row">

        <!--Agrupamos campos de la columna izquierda-->
        <div class="col-sm-6">

            <div class="form-group">
                <label>N° Venta</label>
                <input id="numeroventa" name="numeroventa" required type="text" value="@Model.NumeroVenta" class="form-control" disabled />
            </div>

            <div class="form-group">
                <label>Fecha</label>
                <input id="fecha" name="fecha" required type="datetime" value="@Model.Fecha" class="form-control" disabled />
            </div>

            @*<div class="form-group">
            <label>Cliente</label>
            <div class="tt-container vtamay-cliente">
                <input id="cliente" name="cliente" data-msg-required="Por favor ingresa un Cliente" data-cliente-id="" required type="text" value="" onblur="GetSaldoCliente();" class="form-control" />
                <a href="#" onclick="NuevoClienteModal(0)"><img src="~/Content/Images/addSign.png" title="Ingresar Nuevo Cliente" /></a>


            </div>
        </div>*@

            <div class="form-group">
                <label>Cliente</label>
                <div class="tt-container vtamay-cliente">
                    <input id="cliente" name="cliente" data-msg-required="Por favor ingresa un Cliente" data-cliente-id="@Model.ClienteID" required type="text" value="@Model.Cliente.Nombre" class="form-control" disabled />
                </div>
            </div>

            @*<div class="form-group">
                <label>Vendedor</label>
                <div style="display:flex;">
                    <select id="vendedor" name="vendedor" class="form-control" data-msg-required="Por favor ingresa un Vendedor" required>
                        <option value="" selected="selected">Seleccione...</option>
                        @foreach (var vendedor in @ViewBag.Vendedores)
                {
                    <option value="@vendedor.ID">@vendedor.Nombre</option>
        }
                    </select>&nbsp;&nbsp;
                    <a href="#" onclick="NuevoVendedorModal(0)"><img src="~/Content/Images/addSign.png" style="vertical-align:-webkit-baseline-middle;" title="Ingresar Nuevo Vendedor" /></a>
                </div>
                <label class="error field-validation-valid" for="vendedor" data-valmsg-replace="true"></label>

            </div>*@

            <div class="form-group">
                <label>Vendedor</label>
                @if (Model.Vendedor == null)
    {
            <input id="vendedor" name="vendedor" type="text" data-vendedor-id="" class="form-control" disabled />
}
else
{
            <input id="vendedor" name="vendedor" type="text" value="@Model.Vendedor.Nombre" data-vendedor-id="@Model.VendedorID" class="form-control" disabled />
}

            </div>
            

        </div>

        <!--Agrupamos campos de la columna derecha-->
        <div class="col-sm-6">

            <div class="form-group">
                <label>Entrega Efectivo</label>
                <input id="entregaEfectivo" name="entregaEfectivo" required type="text" value="0" onkeyup="ValidarPunto(this);" class="form-control" />
                <label style="font-size:12px; color: green;">Entregó: $ </label><label style="font-size:12px; color: green;" id="entregoefvo">@Model.EntregaEfectivoHistorico</label>

            </div>

            <div class="form-group">
                <label>Saldo Actual</label>
                <input id="debe" name="debe" type="text" value="@Model.Cliente.Debe" class="form-control" disabled />
            </div>

            <div class="form-group">
                <label>Saldo a Favor</label>
                <input id="saldoFavor" name="saldoFavor" type="text" value="@Model.Cliente.SaldoAfavor" class="form-control js-formatvalue" disabled />
            </div>

            <div class="checkbox">

                @{
            if (Model.NoConcretado)
            {
                <input id="noconcretado" name="noconcretado" type="checkbox" value="" checked />
    }
    else
    {
        <input id="noconcretado" name="noconcretado" type="checkbox" value="" />
}
                }
                <label><strong>Concretado</strong></label>

            </div>

            <div class="checkbox">

                @{
            if (Model.Facturado)
            {
                <input id="facturado" name="facturado" type="checkbox" value="" checked />
    }
    else
    {
        <input id="facturado" name="facturado" type="checkbox" value="" />
}
                }
                <label><strong>Venta Facturada?</strong></label>

            </div>

        </div>

    </div>

    <div class="row">
        <div class="col-sm-12">
            <h3>Productos</h3>
        </div>
    </div>

    <div class="row">
        <div class="col-sm-12">

            <table class="table-bordered table-hover table order-list">
                <thead>
                    <tr>
                        <th width="30%">Producto</th>
                        <th width="5%">Cantidad</th>
                        <th width="10%">Unidad</th>
                        <th width="7%">Descuento (%)</th>
                        <th width="7%">Importe</th>
                        <th width="10%">Total Importe</th>
                        <th width="7%">Acciones</th>
                    </tr>
                </thead>
                <tbody class="listaproductos">
                    @{ int counter = 0;}
                    @foreach (var producto in Model.ProductosXVenta)
                    {
                        <tr>
                            <td><div class="tt-container"><input id="@String.Format("producto{0}", counter)" name="producto" data-msg-required="Por favor ingresa un Producto" data-producto-id="@producto.ProductoID" required type="text" data-js-counter="@counter" value="@producto.Producto.Nombre" onChange="ValidarTipoDeProducto(@counter); " class="form-control" style="max-width:100%" disabled /></div></td>
                            <td><div class="form-group"><input id="@String.Format("cantidad{0}", counter)" name="cantidad" data-msg-required="Por favor ingresa una Cantidad" required type="text" value="@producto.Cantidad.ToString().Replace('.',',')" class="form-control" data-js-counter="@counter" onBlur="ResetearValores(this); CalcularValoresSegunTipoProducto(@counter, '@producto.Producto.EsBlister.ToString()');" /><label id="@String.Format("stockdisponible{0}", counter)"></label></div></td>
                            <td><div class="form-group"><select id="@String.Format("tiposdeunidad{0}", counter)" name="tiposdeunidad" data-msg-required="Por favor ingresa una Unidad" class="form-control" onblur="ValidarTipoDeProducto(@counter);" disabled required><option value="@producto.TipoDeUnidadID">@producto.TipoDeUnidad.Nombre</option></select></div></td>
                            <td><div class="form-group"><input id="@String.Format("descprod{0}", counter)" name="descprod" type="text" data-js-counter="@counter" value="@producto.Descuento" class="js-descprod form-control" /></div></td>
                            <td><div class="form-group"><input id="@String.Format("importe{0}", counter)" name="importe" required type="text" value="@producto.Importe.ToString().Replace(',','.')" class="importe form-control" disabled /></div></td>
                            <td><div class="form-group"><input id="@String.Format("totalimporte{0}", counter)" name="totalimporte" required type="text" data-js-counter="@counter" value="@producto.Total.ToString().Replace(',','.')" class="totalimporte js-prodexistente form-control" disabled /></div></td>
                            <td><input type="button" class="ibtnDel btn btn-md btn-danger " id="@counter" name="@counter" value="Borrar">
                            <input type="hidden" name="prodxventaid" value="@producto.ID"/>
                            </td>
                        </tr>
                            counter++;
                    }

                </tbody>
                <tfoot>
                    <tr>
                        <td colspan="5" style="text-align: left;">
                            <input type="button" class="btn btn-lg btn-block " id="addrow" value="Agregar Producto" />
                        </td>
                        <td colspan="2" style="text-align: right;">
                            <input type="button" class="btn btn-lg btn-primary btn-block" id="calculartotal" value="Calcular Total" />
                        </td>
                    </tr>
                    <tr>
                        <td colspan="7" style="text-align: right;">
                            &nbsp;
                            <label>Descuento:</label>
                            <select id="tipoDescuento" name="tipoDescuento" class="form-control vtamay-tipodescuento">
                                <option value="0" selected="selected">...</option>
                                <option value="1">$</option>
                                <option value="2">%</option>
                            </select>
                            <input type="text" class="form-control vtamay-descuento" id="descuento" value="@Model.Descuento" onkeyup="ValidarPunto(this);" />
                            <br /><br />

                            <label>IVA:</label>
                            <input type="text" class="form-control vtamay-descuento" id="iva" onkeyup="ValidarPunto(this);" value="@Model.IVA" />
                            <br /><br />

                            <label>Total Venta:</label>
                            <input type="text" class="form-control vtamay-totalventa" id="totalventa" value="0" disabled />

                        </td>
                    </tr>
                </tfoot>
            </table>

        </div>
    </div>

    <div class="row">
        <div class="col-sm-12">

            @Html.AntiForgeryToken()
            <input type="hidden" id="totalventaanterior" value="@Model.SumaTotal" />
            <input type="hidden" id="tipodescuentoanterior" value="@Model.TipoDescuentoTotal" />
            <input type="hidden" id="descuentoanterior" value="@Model.Descuento" />
            <button id="btnsubmit" type="submit" class="btn btn-primary">Actualizar Venta</button>
            <button id="btncancelar" type="button" class="btn btn-danger" value="Cancelar" onclick="location.href='@Url.Action("", "VentaMayorista")';">Cancelar</button>

        </div>
    </div>


</form>


@section scripts
{

    @Scripts.Render("~/bundles/jqueryval")    

<script>

        $(document).ready(function () {

            //Inicializamos typeahead para los productos existentes
            $("input[name='producto']").each(function () {

                var input = $(this);
                var cont = input.attr("data-js-counter");
                typeahead_initialize(cont);

            });

            //ViewModel para pasar al webAPI
            var vm = {
                ID: 0,
                fecha: "",
                clienteID: 0,
                numeroVenta: 0,
                noConcretado: false,
                facturado: false,
                sumaTotal: 0,
                tipoDescuentoTotal: 0,
                descuento: 0,
                Debe: 0,
                SaldoAFavor: 0,
                entregaEfectivo: 0,
                entregaEfectivoHistorico: 0,
                iva: 0,
                productosXVenta: []
            };

            //var vm2 = [];

            var descuentoAplicado = false;
            var descuentoAplicadoPorProducto = false;
            var totalCalculado = false;
            //var totalVentaObj = document.getElementById("totalventa");
            var ventaConcretadaInicial = $("#noconcretado").prop('checked');

            var totalInicial = 0;
            var debeInicial = DeFormatearValor($("#debe").val());
            var saldoFavorInicial = DeFormatearValor($("#saldoFavor").val());

            if ($("#noconcretado").prop('checked')) {

                totalInicial = ValorANumero(DeFormatearValor($("#totalventaanterior").val()));
            } else {
                totalInicial = 0;
            }
            
            

            ValidarVentaConcretada();

            CargarValoresInicialesEnVM(vm);
            //GetSaldoCliente();            
            FormatearEntregaEfectivo();
            FormatearSaldo();
            FormatearImportesExistentes();
            CargarTipoDescuento();
            //CargarSumaTotal();
            //GetSaldoParcialCliente();

            
            

            
            //**EVENTOS START **//

            //var observer = new MutationObserver(function (mutations) {
            //    RecalcularSaldoParcial();
            //});
            //observer.observe(totalVentaObj, {
            //    attributes: true,
            //    attributeFilter: ['value']
            //});


            $("#cliente").validate({
                rules: {
                    cliente: "required",
                },
                messages: {
                    cliente: "Por favor ingresa un Cliente",
                },

            });

            var counter = @counter; //Continuamos con la numeracion segun el contador de la tabla de productos
            $("#addrow").on("click", function () {
                //RecalcularTotal();
                ResetearDescuentoTotal();
                ResetearTotal();

                var validarCliente = $("#cliente").valid();

                if (validarCliente) {

                    var newRow = $("<tr>");
                    var cols = "";

                    cols += '<td><div class="tt-container"><input id="producto' + counter + '" name="producto" data-msg-required="Por favor ingresa un Producto" data-producto-id="" required type="text" value="" onChange="ValidarTipoDeProducto(' + counter + '); " class="form-control" style="max-width:100%"/></div></td>';

                    cols += '<td><div class="form-group"><input id="cantidad' + counter + '" name="cantidad" data-msg-required="Por favor ingresa una Cantidad" required type="number" value="" class="form-control" data-js-counter="' + counter + '" onBlur="ResetearValores(this); CalcularValoresBlister(' + counter + ');" /><label id="stockdisponible' + counter + '" ></label></div></td>';

                    cols += '<td><div class="form-group"><select id="tiposdeunidad' + counter + '" name="tiposdeunidad" data-msg-required="Por favor ingresa una Unidad" class="form-control" onChange="CalcularStockYValorProducto(' + counter + '); " required ><option value="-1" >Seleccione...</option></select></div></td>';
                    //GetTiposDeUnidadDynamic(counter);

                    cols += '<td><div class="form-group"><input id="descprod' + counter + '" name="descprod" type="text" data-js-counter="' + counter + '" value="" class="js-descprod form-control" onkeyup="ValidarPunto(this);" /></div></td>';

                    cols += '<td><div class="form-group"><input id="importe' + counter + '" name="importe" required type="text" value="" class="form-control js-formatvalue" disabled /></div></td>';

                    cols += '<td><div class="form-group"><input id="totalimporte' + counter + '" name="totalimporte" required type="text" data-js-counter="' + counter + '" value=""  class="totalimporte form-control js-formatvalue"  disabled /></div></td>';

                    cols += '<td><input type="button" class="ibtnDel btn btn-md btn-danger " id= "' + counter + '" name= "' + counter + '"  value="Borrar"></td>';
                    newRow.append(cols);
                    $("table.order-list").append(newRow);

                    typeahead_initialize(counter);

                    totalCalculado = false;

                    counter++;

                    $("#producto" + counter).validate({
                        rules: {
                            producto: "required",
                        },
                        messages: {
                            producto: "Por favor ingresa un Producto",
                        },

                    });

                    $("#cantidad" + counter).validate({
                        rules: {
                            cantidad: "required",
                        },
                        messages: {
                            cantidad: "Por favor ingresa una Cantidad",
                        },

                    });

                    $("#tiposdeunidad" + counter).validate({
                        rules: {
                            tiposdeunidad: "required",
                        },
                        messages: {
                            tiposdeunidad: "Por favor ingresa una Unidad",
                        },

                    });

                }

            });

            $("table.order-list").on("click", ".ibtnDel", function (event) {

                var button = $(this);
                var productoID = $("#producto" + parseInt(button.context.id)).attr("data-producto-id");
                var tipoDeUnidadID = $("#tiposdeunidad" + parseInt(button.context.id)).val();
                var ventaID = @ViewBag.VentaMayoristaID;
                var valor = parseInt(this.attributes.name.value);

                var readonlyInput = $("#producto" + parseInt(button.context.id)).prop('disabled');

                var model = {
                    "productoID": productoID,
                    "ventaID": ventaID,
                    "tipoDeUnidadID": tipoDeUnidadID
                };

                bootbox.confirm("¿Estas seguro de querer borrar el producto?", function (result) {


                    if (result) {

                        if (productoID != "" && readonlyInput) {

                            //Borramos la fila con datos
                            $.ajax({
                                url: "/api/ventasmayorista/deleteproductoventamayorista/",
                                method: "DELETE",
                                data: model,
                                success: function () {

                                    toastr.success("Producto eliminado satisfactoriamente de la venta");

                                    button.closest("tr").remove();

                                    valor += 1;

                                    if (valor == counter) {
                                        counter -= 1;
                                    } else {
                                        counter += 1;
                                    }

                                    typeahead_initialize(counter);

                                    //Requerir que se calcule el total si no hacen click en el boton
                                    totalCalculado = false;
                                    //location.reload();
                                },
                                error: function () {
                                    toastr.error("Error al borrar el producto, consulte con el administrator");
                                }
                            });
                        }
                        else {
                            //Borramos la fila vacia
                            button.closest("tr").remove();

                            valor += 1;

                            if (valor == counter) {
                                counter -= 1;
                            } else {
                                counter += 1;
                            }

                            typeahead_initialize(counter);

                            //Requerir que se calcule el total si no hacen click en el boton
                            totalCalculado = false;
                                                        
                            CargarTipoDescuento();
                            CargarSumaTotal();
                        }


                        
                    }


                });

            });


            $("#tipoDescuento").on('change', function () {

                //Seleccion = 1 ---> $
                //Seleccion = 2 ---> %
                var seleccion = $("#tipoDescuento").val();

                if (seleccion == 1 || seleccion == 2) {
                    $("#descuento").removeAttr("disabled");

                    descuentoAplicado = false;
                    $("#descuento").val("");
                }
                else {
                    $("#descuento").attr("disabled", "disabled");
                    $("#descuento").val("");

                    RecalcularTotal();
                    CalcularDescuentoTotal();                    
                    //CalcularSaldoFinal();
                }

            })           

            $("#noconcretado").on('change', function () {
                if (this.checked) {
                    vm.noConcretado = true;
                }
                else {
                    vm.noConcretado = false;

                    //Si el form estaba grisado, lo desgrisamos                   
                    //$("#totalventa").prop("disabled", true);
                    //$("#saldoFavor").prop("disabled", true);
                    //$("#addrow").prop("disabled", true);
                    //$("#vendedor").prop("disabled", true);
                    //$("#fecha").prop("disabled", true);
                    //$("#numeroventa").prop("disabled", true);
                    $('input[name*="cantidad"]').prop("disabled", false);
                    $('input[name*="descprod"]').prop("disabled", false);
                    $('input[class*="ibtnDel"]').prop("disabled", false);
                    $("#entregaEfectivo").prop("disabled", false);
                    $("#tipoDescuento").prop("disabled", false);
                    $("#descuento").prop("disabled", false);
                    $("#calculartotal").prop("disabled", false);
                    $("#addrow").prop("disabled", false);

                }

            })

            $("#facturado").on('change', function () {
                if (this.checked) {
                    vm.facturado = true;
                }
                else {
                    vm.facturado = false;
                }

            })

            $("#entregaEfectivo").on('change', function () {

                var valor = this.value;
                valor = DeFormatearEntregaEfectivo(valor);
                $("#entregaEfectivo").val(FormatearValor(valor));

            })

            //DESCUENTO POR PRODUCTO
            $(document).on('blur', "input.js-descprod", function () {
                               
                var input = $(this);
                var descuento = ValorANumero(input[0].value);

                var counter = input.attr("data-js-counter");
                var cantidad = $("#cantidad" + counter).val();
                var importe = $("#importe" + counter).val();

                if (descuento != "") {

                    var importeTotal = cantidad * DeFormatearValor(importe);

                    var importeConDesc = importeTotal - ((importeTotal * descuento) / 100);
                    $("#totalimporte" + counter).val(FormatearValor(importeConDesc));

                }
                else {

                    var importeTotal = cantidad * DeFormatearValor(importe);
                    $("#totalimporte" + counter).val(FormatearValor(importeTotal));

                }


            });

            $("#calculartotal").on('click', function () {

                //Validamos primero productos duplicados
                var validarDuplicados = ValidarProductoDuplicado();

                if (!validarDuplicados) {

                    //Una vez cargados todos los productos, calculamos total
                    RecalcularTotal();
                    CalcularDescuentoTotal();
                    CalcularIVA();
                    VerificarEntregaEfectivo(totalInicial);

                    totalCalculado = true;

                }
                else {
                    toastr.error("Hay Productos duplicados en el formulario, por favor revise la carga y vuelva a intentar...");
                }

            })

            //**EVENTOS END **//

            // Autocomplete para Cliente
            var clientes = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('Nombre'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                prefetch: {
                    url: '/api/clientes?query=%QUERY',
                    wildcard: '%QUERY',
                    cache: false
                }
            });

            $('#cliente').typeahead({
                minLength: 1,
                highlight: true,
                hint: true,
                limit: Infinity
            }, {
                    name: 'cliente',
                    display: 'Nombre',
                    source: clientes
                }).on("typeahead:select", function (e, cliente) {

                    $("#cliente").attr("data-cliente-id", cliente.ID);
                    vm.clienteID = cliente.ID;

                });


            var validator = $("#vtamayform").validate({

                submitHandler: function () {

                    //var validarProducto = $('input[name*="producto"]').valid();
                    //var validarCantidad = $('input[name*="cantidad"]').valid();
                    //var validartipodeUnidad = $('select[name*="tiposdeunidad"]').valid();

                    //if (validarProducto && validarCantidad && validartipodeUnidad) {
                    

                    if (ventaConcretadaInicial) {
                        if (!$("#noconcretado").prop('checked')) {
                            toastr.error("Por favor concretar la venta antes de continuar...");
                            return false;
                        }
                    }

                    //Modal para aceptacion de venta
                    bootbox.confirm("Estas seguro que deseas actualizar la venta?", function (result) {

                        var validarProductos = $('input[name*="producto"]');

                        if (validarProductos.length == 0)
                            $("#calculartotal").trigger("click");

                        if (totalCalculado) {

                            if (result) {

                                var totalFinal = 0;
                                var total = DeFormatearValor($("#totalventa").val());
                              
                                totalFinal = total;                               

                                //if (debeInicial != 0 || saldoFavorInicial != 0) {
                                    if (totalInicial != totalFinal) {
                                        recalculoDebe(totalInicial);
                                    }
                                //}

                                calculoDebe();

                                SumarEntregaEfvo();

                                CargarProductosAlVM(vm);


                                //var model = {
                                //    "ventaMayorista": vm,
                                //    "productosXVenta": vm2
                                //};


                                $.ajax({
                                    url: "/api/ventasmayorista",
                                    method: "put",
                                    data: vm
                                })
                                    .done(function () {

                                        toastr.success("La venta se ha actualizado correctamente.");

                                        setTimeout(function () {
                                            window.location.href = "/VentaMayorista";
                                        }, 4000);

                                    })
                                    .fail(function () {
                                        toastr.error("Se ha producido un error al guardar la venta, revise los datos a ingresar...");

                                        //Reseteamos los productos del viewmodel
                                        vm.productosXVenta = [];
                                        //vm2 = [];

                                        $("#debe").val(FormatearValor(debeInicial));
                                        $("#saldoFavor").val(FormatearValor(saldoFavorInicial));

                                        totalCalculado = false;
                                    });

                            }

                        }
                        else {
                            toastr.error("El valor total de la venta no ha sido calculado. Hacer click en el botón Calcular Total para continuar...");                                
                        }

                    });

                    //}

                    return false;
                }
            });

        });

</script>

    <!-- FUNCIONES -->
    <script>
       
        function typeahead_initialize(counter) {


            //Inicializacion necesaria para typeahead dinamicos
            var clienteID = $("#cliente").attr("data-cliente-id");

            var productos = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('Nombre'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                prefetch: {
                    url: 'api/productos/ProductosXLista?clienteID=' + clienteID,
                    cache: false
                }
            });

            $('#producto' + counter).typeahead({
                minLength: 1,
                highlight: true,
                hint: true,
                limit: Infinity
            }, {
                    name: 'producto',
                    display: 'NombreAuxiliar',
                    source: productos
                }).on("typeahead:select", function (e, producto) {

                    $("#producto" + counter).attr("data-producto-id", producto.ID);

                });

        }

        //function GetSaldoCliente() {

        //    var clienteID = $("#cliente").attr("data-cliente-id");

        //    if (clienteID != "") {
        //        $.getJSON("/VentaMayorista/GetSaldoClienteAsync", { ClienteID: clienteID }, ActualizarSaldoCliente)
        //            .error(function (xhr, textStatus, exceptionThrown) {
        //                bootbox.alert(xhr.responseText);
        //            })
        //    }

        //}

        //ActualizarSaldoCliente = function (data) {

        //    if (data.Saldo >= 0) {
        //        $("#debe").val(FormatearValor(data.Debe));
        //        $("#saldoFavor").val(FormatearValor(data.SaldoAFavor));
        //    }
        //    else {
        //        $("#debe").val(FormatearValor(0));
        //        $("#saldoFavor").val(FormatearValor(0));
        //    }

        //    CargarSumaTotal();
        //    //GetSaldoParcialCliente();

        //    //Si no esta concretado, sumamos el total al saldo parcial
        //    //CalcularSaldoParcialInicial();
        //}

        //function GetSaldoParcialCliente() {

        //    var totalVenta = $("#totalventa").val();
        //    var saldoFavor = $("#saldoFavor").val();            
        //    //var nuevoSaldoParcial = DeFormatearValor(totalVenta) + DeFormatearValor(saldoFavor);

        //    $("#saldoFavor").val($("#debe").val());
        //}

        function CalcularStockYValorProducto(counter) {

            var validarProducto = $("#producto" + counter).valid();
            var validarCantidad = $("#cantidad" + counter).valid();

            if (validarProducto && validarCantidad) {

                var clienteID = $("#cliente").attr("data-cliente-id");
                var productoID = $("#producto" + counter).attr("data-producto-id");
                var cantidad = $("#cantidad" + counter).val().replace(",",".");
                var tipoUnidadID = $("#tiposdeunidad" + counter + " option:selected").val();

                if (tipoUnidadID > 0) {
                    $.getJSON("/VentaMayorista/CalcularStockYValorProductoAsync", { ClienteID: clienteID, ProductoID: productoID, Cantidad: cantidad, TipoUnidadID: tipoUnidadID, Counter: counter }, ActualizarValores)
                        .error(function (xhr, textStatus, exceptionThrown) {
                            bootbox.alert(xhr.responseText);
                        })
                }




            }



        }

        ActualizarValores = function (data) {


            if (data.Success) {

                var importe = data.Importe;
                var importeTotal = data.ImporteTotal;
                //var sumaVentaTotal = 0;

                var cantidad = $("#cantidad" + data.Counter).val();
                if (data.Stock - cantidad < 0) {
                    $("#stockdisponible" + data.Counter).text("Stock Disponible: " + data.Stock);
                    $("#stockdisponible" + data.Counter).css("color", "red");
                }
                else {
                    $("#stockdisponible" + data.Counter).text("Stock Disponible: " + data.Stock);
                    $("#stockdisponible" + data.Counter).css("color", "green");
                }

                $("#importe" + data.Counter).val(FormatearValor(importe));
                $("#totalimporte" + data.Counter).val(FormatearValor(importeTotal));

                if (data.Stock - cantidad <= 0) {

                    var readonlyInput = $("#producto" + data.Counter).prop('disabled');

                    if (readonlyInput) {

                        bootbox.alert("El producto no tiene stock para la cantidad ingresada. Stock disponible: " + data.Stock + ". Por favor eliminar el producto o modificar cantidad segun stock disponible.");

                    }
                    else {

                        bootbox.alert("El producto no tiene stock para la cantidad ingresada. Stock disponible: " + data.Stock + ".");
                        var botonBorrar = $("#" + data.Counter + ".ibtnDel");

                        //Borramos la fila
                        botonBorrar.closest("tr").remove();

                        valor += 1;

                        if (valor == counter) {
                            counter -= 1;
                        } else {
                            counter += 1;
                        }

                        typeahead_initialize(counter);

                        //Requerir que se calcule el total si no hacen click en el boton
                        totalCalculado = false;

                        CargarTipoDescuento();
                        CargarSumaTotal();

                    }

                }

                //RecalcularTotal();
                //CalcularSaldoFinal();

            }
            else {
                bootbox.alert(data.Error);
            }



        }        
                
        function RecalcularTotal() {

            var totalVentaAnterior = $("#totalventaanterior").val();
            var totalActualTemp = DeFormatearValor($("#totalventa").val());
            var sumaVentaTotal = 0;

            $(".totalimporte").each(function () {
                sumaVentaTotal += parseFloat(DeFormatearValor(this.value));
            });

            if (sumaVentaTotal != totalActualTemp) {
                $("#totalventa").val(FormatearValor(sumaVentaTotal)).trigger("change");
                $("#totalventaanterior").val(FormatearValor(sumaVentaTotal));

            }
            


        }

        //$("#totalventa").on('change', function () {
        //    RecalcularSaldoParcial();
        //})

        //function RecalcularSaldoParcial() {


        //    var saldo = DeFormatearValor($("#saldoFavor").val());
        //    var totalVenta = DeFormatearValor($("#totalventa").val());
        //    var totalVentaAnterior = ValorANumero($("#totalventaanterior").val());

        //    if (totalVentaAnterior > totalVenta) {

        //        var saldoFavor = totalVentaAnterior - totalVenta;

        //        saldo = saldo - saldoFavor;

        //        if (saldo < 0) {

        //            //debe = debe * (-1);
        //            // $("#saldoAfavor").val(FormatearValor(debe));
        //            $("#saldoFavor").val(FormatearValor(0));

        //        } else {

        //            $("#saldoFavor").val(FormatearValor(saldo));
        //            // $("#saldoAfavor").val(FormatearValor(0));
        //        }

        //    }

        //    if (totalVentaAnterior < totalVenta) {

        //        var saldoFavor = totalVenta - totalVentaAnterior;

        //        saldo = saldo + saldoFavor;


        //        $("#saldoFavor").val(FormatearValor(saldo));
        //        //$("#saldoAfavor").val(FormatearValor(0));

        //    }

        //    if (totalVentaAnterior == totalVenta) {


        //        $("#saldoFavor").val(FormatearValor(saldo));
        //        //$("#saldoAfavor").val(FormatearValor(0));

        //    }

        //    $("#totalventaanterior").val($("#totalventa").val());

        //}

        function GetTiposDeUnidadDynamic(counter) {

            $.getJSON("/VentaMayorista/GetTiposDeUnidadDynamicAsync", { Counter: counter }, PopulateTiposDeUnidadDynamic)
                .error(function (request, textStatus, errorThrown) { alert(errorThrown); })

        }

        PopulateTiposDeUnidadDynamic = function (data) {

            $.each(data.TiposDeUnidad, function () {
                $("#tiposdeunidad" + data.Counter).append($("<option />").val(this.ID).text(this.Nombre));
            });

        }

        function ResetearValores(txtbox) {

            var input = $(txtbox);
            var counter = input.attr("data-js-counter");

            $("#tiposdeunidad" + counter).prop('selectedIndex', 0);
            $("#descprod" + counter).val("");
            $("#importe" + counter).val("");
            $("#totalimporte" + counter).val("");


        }

        function ResetearDescuentoTotal() {

            //Si se agrega o remueve un row, resetear el descuento total
            $("#tipoDescuento").prop("selectedIndex", 0).change();
            $("#descuento").attr("disabled", "disabled");
            $("#descuento").val("");

            //CalcularSaldoFinal();

        }

        function CargarValoresInicialesEnVM(vm) {

            var numeroventa = $("#numeroventa").val();
            var fecha = $("#fecha").val();

            vm.numeroVenta = numeroventa;
            vm.fecha = fecha;
        }

        function CargarProductosAlVM(vm) {

            //Cargamos la lista de productos
            $(".listaproductos tr").each(function (i, row) {

                var $row = $(row),
                    $producto = $row.find('input[name*="producto"]'),
                    $cantidad = $row.find('input[name*="cantidad"]'),
                    $tipodeunidad = $row.find('select[name*="tiposdeunidad"]'),
                    $descuento = $row.find('input[name*="descprod"]'),
                    $importe = $row.find('input[name*="importe"]'),
                    $totalimporte = $row.find('input[name*="totalimporte"]');
                    $prodxventaid = $row.find('input[name*="prodxventaid"]');

                var productoid = $producto.attr("data-producto-id");
                var cantidad = $cantidad.val().replace(",",".");
                var tipodeunidad = $tipodeunidad.val();
                var descuento = ValorANumero($descuento.val());
                var importe = DeFormatearValor($importe.val());
                var totalimporte = DeFormatearValor($totalimporte.val());
                var prodxventaid = $prodxventaid.val();

                vm.productosXVenta.push(
                    {
                        ID: prodxventaid,
                        VentaID: @ViewBag.VentaMayoristaID,
                        ProductoID: productoid,
                        Cantidad: cantidad,
                        TipoDeUnidadID: tipodeunidad,
                        Descuento: descuento,
                        Importe: importe,
                        Total: totalimporte
                    }
                );

                

            });

            @*//Productos Nuevos
            $(".productosnuevos").each(function (i, row) {

                var $row = $(row),
                    $producto = $row.find('input[name*="producto"]'),
                    $cantidad = $row.find('input[name*="cantidad"]'),
                    $tipodeunidad = $row.find('select[name*="tiposdeunidad"]'),
                    $descuento = $row.find('input[name*="descprod"]'),
                    $importe = $row.find('input[name*="importe"]'),
                    $totalimporte = $row.find('input[name*="totalimporte"]');
                $prodxventaid = $row.find('input[name*="prodxventaid"]');

                var productoid = $producto.attr("data-producto-id");
                var cantidad = $cantidad.val();
                var tipodeunidad = $tipodeunidad.val();
                var descuento = $descuento.val();
                var importe = DeFormatearValor($importe.val());
                var totalimporte = DeFormatearValor($totalimporte.val());
                var prodxventaid = $prodxventaid.val();

                vm2.push(
                    {
                        ProductoID: productoid,
                        Cantidad: cantidad,
                        TipoDeUnidadID: tipodeunidad,
                        VentaID: @ViewBag.VentaMayoristaID,
                        Descuento: descuento,
                        Importe: importe,
                        Total: totalimporte
                    }
                );



            });*@

            //Cargamos el resto de los datos
            vm.ID = @ViewBag.VentaMayoristaID;
            vm.noConcretado = $("#noconcretado").prop('checked'); 
            vm.clienteID = $("#cliente").attr("data-cliente-id");
            vm.vendedorID = $("#vendedor").attr("data-vendedor-id");
            vm.entregaEfectivo = DeFormatearValor($("#entregaEfectivo").val());
            vm.entregaEfectivoHistorico = $("#entregoefvo").text();
            vm.tipoDescuentoTotal = $("#tipoDescuento").val();
            vm.descuento = DeFormatearValor($("#descuento").val());
            vm.Debe = DeFormatearValor($("#debe").val());
            vm.SaldoAFavor = DeFormatearValor($("#saldoFavor").val());
            vm.iva = ValorANumero($("#iva").val());
            vm.sumaTotal = DeFormatearValor($("#totalventa").val());     

        }

        function ValidarTipoDeProducto(counter) {

            var productoID = $("#producto" + counter).attr("data-producto-id");

            if (productoID > 0) {
                $.getJSON("/VentaMayorista/ValidarTipoDeProductoAsync", { ProductoID : productoID, Counter: counter }, PopulateTipoDeUnidadSegunProducto)
                    .error(function (xhr, textStatus, exceptionThrown) {
                        bootbox.alert(xhr.responseText);
                    })
            }

        }

        PopulateTipoDeUnidadSegunProducto = function (data) {

            if (data.EsBlister && data.EsMix) {
                $("#tiposdeunidad" + data.Counter).empty();
                $("#tiposdeunidad" + data.Counter).append($("<option />").val("-1").text("Seleccione..."));
                $("#tiposdeunidad" + data.Counter).append($("<option />").val("@ViewBag.TipoDeUnidadBlister").text("Blister"));
                $("#tiposdeunidad" + data.Counter).append($("<option />").val("@ViewBag.TipoDeUnidadMix").text("Mix"));

            }
            @*else if (data.EsBlister) {
                $("#tiposdeunidad" + data.Counter).empty();
                $("#tiposdeunidad" + data.Counter).append($("<option />").val("-1").text("Seleccione..."));
                $("#tiposdeunidad" + data.Counter).append($("<option />").val("@ViewBag.TipoDeUnidadBlister").text("Blister"));

            }*@
            else if(data.EsMix) {
                $("#tiposdeunidad" + data.Counter).empty();
                $("#tiposdeunidad" + data.Counter).append($("<option />").val("-1").text("Seleccione..."));
                $("#tiposdeunidad" + data.Counter).append($("<option />").val("@ViewBag.TipoDeUnidadMix").text("Kg."));
               
            }
            else {
                $("#tiposdeunidad" + data.Counter).empty();
                $("#tiposdeunidad" + data.Counter).append($("<option />").val("-1").text("Seleccione..."));
                GetTiposDeUnidadDynamic(data.Counter);
                
            }

        }

        UpdateStockBlister = function (data) {

            if (data.Success) {

                var cantidad = $("#cantidad" + data.Counter).val();
                if (data.Stock - cantidad < 0) {
                    $("#stockdisponible" + data.Counter).text("Stock Disponible: " + data.Stock);
                    $("#stockdisponible" + data.Counter).css("color", "red");
                }
                else {
                    $("#stockdisponible" + data.Counter).text("Stock Disponible: " + data.Stock);
                    $("#stockdisponible" + data.Counter).css("color", "green");
                }

            }
            else {
                bootbox.alert(data.Error);
            }

        }

        function CalcularValoresBlister(counter) {

            var validarProducto = $("#producto" + counter).valid();
            var validarCantidad = $("#cantidad" + counter).valid();

            if (validarProducto && validarCantidad) {

                var clienteID = $("#cliente").attr("data-cliente-id");
                var productoID = $("#producto" + counter).attr("data-producto-id");
                var cantidad = $("#cantidad" + counter).val();
                var tipoUnidadID = $("#tiposdeunidad" + counter + " option:selected").val();

                if (tipoUnidadID > 0) {
                    $.getJSON("/VentaMayorista/CalcularValorBlisterAsync", { ClienteID: clienteID, ProductoID: productoID, Cantidad: cantidad, TipoUnidadID: tipoUnidadID, Counter: counter }, ActualizarValores)
                        .error(function (xhr, textStatus, exceptionThrown) {
                            bootbox.alert(xhr.responseText);
                        })
                }

            }


        }

        function CalcularValoresSegunTipoProducto(counter, esBlister) {

            //Aplica solo para productos existentes del listado, para diferenciar cual es Blister y Cual no

            if (esBlister.toLowerCase() == "True")
                CalcularValoresBlister(counter);
            else
                CalcularStockYValorProducto(counter);
        }

        function FormatearValor(valor) {

            var formatter = new Intl.NumberFormat('es-AR', {
                style: 'currency',
                currency: 'ARS',
                //minimumFractionDigits: 2,
                // the default value for minimumFractionDigits depends on the currency
                // and is usually already 2
            });

            valor = formatter.format(valor);

            return valor;

        }

        //function DeFormatearValor(valor) {

        //    if (valor.indexOf("$") != -1 || $("#descuento").val() != "") {
        //        valor = valor.replace("$", "").trim();
        //        valor = ValorANumero(valor);
        //    }

        //    return valor;
        //}

        function DeFormatearEntregaEfectivo(valor) {

            if (valor != "") {
                valor = valor.replace("$", "").trim();
                valor = ValorANumero(valor);
            }

            return valor;
        }

        //function DeFormatearSaldo(valor) {

        //    if (valor != "") {
        //        valor = valor.replace("$", "").trim();
        //        valor = ValorANumero(valor);
        //    }

        //    return valor;
        //}

        function ValidarPunto(textbox) {

            var word = ["."];

            for (i = 0; i < word.length; i++) {
                if (textbox.value.indexOf(word[i]) >= 0) {
                    $("#" + textbox.id).val($("#" + textbox.id).val().replace(".", ","));
                }                
            }

        }

        function FormatearEntregaEfectivo() {

            var valor = $("#entregaEfectivo").val();
            valor = DeFormatearEntregaEfectivo(valor);
            $("#entregaEfectivo").val(FormatearValor(valor));
        }

        function FormatearSaldo() {
            
            $("#saldoFavor").val(FormatearValor(ValorANumero($("#saldoFavor").val())));
            $("#debe").val(FormatearValor(ValorANumero($("#debe").val())));
        }

        //function CalcularSaldoFinal() {

        //    //var totalVentaAnterior = DeFormatearEntregaEfectivo($("#totalventaanterior").val());
        //    var entregaEfvo = DeFormatearEntregaEfectivo($("#entregaEfectivo").val());
        //    var sumaTotal = DeFormatearEntregaEfectivo($("#totalventa").val());
        //    var saldo = DeFormatearEntregaEfectivo($("#saldoFavor").val());
        //    //var totalVentaMasSaldo = DeFormatearEntregaEfectivo($("#totalventamassaldo").val());

        //    $("#saldoFavor").val(FormatearValor(parseFloat(saldo) - parseFloat(entregaEfvo)));

        //}

        //function ResetearSaldo() {
           
        //    var saldo = DeFormatearEntregaEfectivo($("#debe").val());
        //    $("#saldoFavor").val(FormatearValor(parseFloat(saldo)));

        //}

        function ResetearTotal() {
                        
            $("#totalventa").val(FormatearValor(0));
        }

        function CalcularIVA() {

            var iva = ValorANumero($("#iva").val());
            var totalActual = DeFormatearValor($("#totalventa").val());
            var nuevoTotal = 0;

            if (iva != 0) {

                nuevoTotal = ((totalActual * iva) / 100) + totalActual;

                $("#totalventa").val(FormatearValor(nuevoTotal));
            }
        }

        function CalcularDescuentoTotal() {

            var sumaParcialConDesc = 0;
            var sumaParcialSinDesc = 0;

            //Seleccion = 1 ---> $
            //Seleccion = 2 ---> %
            var seleccion = $("#tipoDescuento").val();

            if ((seleccion == 1 || seleccion == 2) && $("#descuento").val() != "") {

                var sumaVentaTotal = 0;
                var nuevoTotal = 0;
                //var saldo = DeFormatearValor($("#debe").val());

                $(".totalimporte").each(function () {

                    var descuento = $(this).closest('tr').find('td .js-descprod').val();

                    if (descuento != "" && descuento != "0") {
                        sumaParcialConDesc += parseFloat(DeFormatearValor(this.value));
                    }
                    else {
                        sumaParcialSinDesc += parseFloat(DeFormatearValor(this.value));
                    }

                    //sumaVentaTotal += parseFloat(this.value);
                });

                var descuento = parseFloat(DeFormatearValor($("#descuento").val()));

                if (seleccion == 1 && sumaParcialSinDesc != 0)
                    nuevoTotal = sumaParcialSinDesc - descuento;
                else
                    nuevoTotal = sumaParcialSinDesc - ((sumaParcialSinDesc * descuento) / 100);

                nuevoTotal = nuevoTotal + sumaParcialConDesc;

                var nuevoTotalsinSaldo = FormatearValor(nuevoTotal);
                $("#totalventa").val(nuevoTotalsinSaldo).trigger("change");

                //CalcularSaldoFinal();
            }
            else {

                if ($("#descuento").val() != "") {
                    $("#descuento").attr("disabled", "disabled");
                    $("#descuento").val("");
                }

            }

        }

        function CargarTipoDescuento() {

            var tipoDescAnterior = $("#tipodescuentoanterior").val();
            $("#tipoDescuento").prop("selectedIndex", parseInt(tipoDescAnterior)).change();
            
        }

        function CargarSumaTotal() {

            var totalAnterior = ValorANumero($("#totalventaanterior").val());
            $("#totalventa").val(FormatearValor(totalAnterior));
        }

        function FormatearImportesExistentes() {

            //Formateamos los valores de los productos existentes de la venta
            $(".totalimporte").each(function () {

                $(this).val(FormatearValor(this.value));
            });

            $(".importe").each(function () {

                $(this).val(FormatearValor(this.value));
                //$(this).on("blur", function () {
                //    $(this).val(FormatearValor(this.value));
                //});
                
            });

        }

        function ValidarVentaConcretada() {

            @*var userRole = '@(User.IsInRole("Administrator") ? "true" : "false")';*@

            if ($("#noconcretado").prop('checked')) {

                //Venta Concretada, grisamos todos los campos del formulario, excepto Concretado si el user es Admin
                $("#vtamayform :input").prop("disabled", true);

                $("#facturado").prop("disabled", false);
                $("#btnsubmit").prop("disabled", false);
                $("#btncancelar").prop("disabled", false);

               // if (userRole == "true")
                    $("#noconcretado").prop("disabled", false);
                
            }

        }

        //function CalcularSaldoParcialInicial() {

        //    var concretado = $("#noconcretado").is(':checked');
        //    var saldoFavor = DeFormatearValor($("#saldoFavor").val());
        //    var sumaTotal = ValorANumero($("#totalventaanterior").val());

        //    if (concretado != true) {
        //        $("#saldoFavor").val( FormatearValor(saldoFavor + sumaTotal) );
        //    }

        //}

        function calculoDebe() {

            var aPagar = 0;
            var nuevoValor = 0;
            var entregaEfectivo = DeFormatearEntregaEfectivo($("#entregaEfectivo").val());
            var debe = DeFormatearValor($("#debe").val());
            var saldoFavor = DeFormatearValor($("#saldoFavor").val());
            var total = DeFormatearValor($("#totalventa").val());
           
            aPagar = total;           

            if (debe == 0 && saldoFavor == 0) {

                nuevoValor = aPagar - entregaEfectivo;

                if (nuevoValor < 0) {

                    nuevoValor = nuevoValor * (-1);
                    $("#debe").val(FormatearValor(0));
                    $("#saldoFavor").val(FormatearValor(nuevoValor));

                } else if (nuevoValor > 0) {

                    $("#debe").val(FormatearValor(nuevoValor));
                    $("#saldoFavor").val(FormatearValor(0));
                } else {

                    $("#debe").val(FormatearValor(0));
                    $("#saldoFavor").val(FormatearValor(0));
                }
            }

            if (debe == 0 && saldoFavor != 0) {

                // nuevoValor = saldoFavor + entregaEfectivo;

                nuevoValor = entregaEfectivo - saldoFavor;

                if (nuevoValor < 0) {

                    nuevoValor = nuevoValor * (-1);
                    $("#debe").val(FormatearValor(0));
                    $("#saldoFavor").val(FormatearValor(nuevoValor));

                } else if (nuevoValor > 0) {

                    $("#debe").val(FormatearValor(nuevoValor));
                    $("#saldoFavor").val(FormatearValor(0));
                } else {

                    $("#debe").val(FormatearValor(0));
                    $("#saldoFavor").val(FormatearValor(0));
                }
            }

            if (debe != 0 && saldoFavor == 0) {

                // nuevoValor = aPagar + debe;

                nuevoValor = entregaEfectivo - debe;

                if (nuevoValor < 0) {

                    nuevoValor = nuevoValor * (-1);
                    $("#debe").val(FormatearValor(nuevoValor));
                    $("#saldoFavor").val(FormatearValor(0));

                } else if (nuevoValor > 0) {

                    $("#debe").val(FormatearValor(0));
                    $("#saldoFavor").val(FormatearValor(nuevoValor));
                } else {

                    $("#debe").val(FormatearValor(0));
                    $("#saldoFavor").val(FormatearValor(0));
                }
            }



        }

        function recalculoDebe(totalInicial) {

            var totalFinal = 0;
            var difTotal = 0;
            var total = DeFormatearValor($("#totalventa").val());
            var saldoFavor = DeFormatearValor($("#saldoFavor").val());
            var debe = DeFormatearValor($("#debe").val());

            totalFinal = total;
         
            if (debe != 0 && saldoFavor == 0) {

                difTotal = totalInicial - totalFinal;

                if (difTotal < 0) {

                    difTotal = difTotal * (-1);
                    debe = debe + difTotal;
                    $("#debe").val(FormatearValor(debe));

                } else {
                    debe = debe - difTotal;

                    if (debe < 0) {
                        debe = debe * (-1);
                        $("#saldoFavor").val(FormatearValor(debe));
                        $("#debe").val(FormatearValor(0));
                    }
                    else {
                        $("#debe").val(FormatearValor(debe));
                    }
                    
                }

            }


            if (debe == 0 && saldoFavor != 0) {

                difTotal = totalInicial - totalFinal;

                if (difTotal < 0) {

                    difTotal = difTotal * (-1);
                    difTotal = saldoFavor - difTotal;

                    if (difTotal < 0) {
                        difTotal = difTotal * (-1);

                        $("#debe").val(FormatearValor(difTotal));
                        $("#saldoFavor").val(FormatearValor(0));

                    } else {
                        $("#saldoFavor").val(FormatearValor(difTotal));
                    }
                } else {
                    difTotal = saldoFavor + difTotal;
                    $("#saldoFavor").val(FormatearValor(difTotal));
                }


            }

            if (debe == 0 && saldoFavor == 0) {

                difTotal = totalInicial - totalFinal;

                if (difTotal < 0) {

                    difTotal = difTotal * (-1);
                    $("#debe").val(FormatearValor(difTotal));

                } else {
                    $("#saldoFavor").val(FormatearValor(difTotal));
                }

            }

        }

        function ValidarProductoDuplicado() {

            var prods = [];
            var tempID = [];
            var duplicate = false;

            $(".listaproductos tr").each(function (i, row) {



                var $row = $(row),
                    $producto = $row.find('input[name*="producto"]'),
                    $cantidad = $row.find('input[name*="cantidad"]'),
                    $tipodeunidad = $row.find('select[name*="tiposdeunidad"]'),
                    $descuento = $row.find('input[name*="descprod"]'),
                    $importe = $row.find('input[name*="importe"]'),
                    $totalimporte = $row.find('input[name*="totalimporte"]');

                var productoid = $producto.attr("data-producto-id");
                var cantidad = $cantidad.val();
                var tipodeunidad = $tipodeunidad.val();
                var descuento = ValorANumero($descuento.val());
                var importe = DeFormatearValor($importe.val());
                var totalimporte = DeFormatearValor($totalimporte.val());

                prods.push(
                    {
                        ProdTU: productoid.toString() + tipodeunidad.toString()
                    }
                );





            });

            //Validamos productos duplicados
            $.each(prods, function (key, value) {

                if ($.inArray(value.ProdTU, tempID) === -1) {
                    tempID.push(value.ProdTU);
                }
                else
                    duplicate = true;

            });

            return duplicate;
        }

        function SumarEntregaEfvo() {

            var entregaefvo = DeFormatearValor($("#entregaEfectivo").val());
            var entregoefectivo = ValorANumero($("#entregoefvo").text());

            entregoefectivo += entregaefvo;

            //Vuelve a asignarlo
            $("#entregoefvo").text(entregoefectivo);
        }

        function VerificarEntregaEfectivo(totalInicial) {

            var total = DeFormatearValor($("#totalventa").val());

            if (totalInicial > total) {
                //Grisamos Entrega Efectivo
                $("#entregaEfectivo").val(0);
                $("#entregaEfectivo").prop("disabled", true);
            } else {
                $("#entregaEfectivo").prop("disabled", false);
            }

        }


    </script>

}
