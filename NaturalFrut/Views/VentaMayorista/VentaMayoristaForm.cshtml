@model NaturalFrut.App_BLL.ViewModels.VentaMayoristaViewModel
@{
    ViewBag.Title = "CargarVenta";
    Layout = "~/Views/Shared/_Layout.cshtml";
}



<h2>Ingresar Venta</h2>

@using (Html.BeginForm("GuardarVentaMayorista", "VentaMayorista"))
{

    <div class="row">
        @Html.ValidationSummary(true, "Por favor revise los siguientes errores:")
    </div>

    <div class="row">

        <!--Agrupamos campos de la columna izquierda-->
        <div class="col-sm-6">

            <div class="form-group">
                <label>N° Venta</label>
                @Html.TextBoxFor(c => c.ID, new { @class = "form-control", @readonly = "readonly" })
                @Html.ValidationMessageFor(c => c.ID)
            </div>

            <div class="form-group">
                @Html.LabelFor(c => c.Fecha)
                @Html.TextBoxFor(c => c.Fecha, new { id = "Fecha", @class = "form-control", @Value = DateTime.Now.ToString("dd/MM/yyyy HH:mm"), @readonly = "readonly" })
                @Html.ValidationMessageFor(c => c.Fecha)
            </div>

            <div class="form-group">
                <label>Cliente</label>
                <div class="tt-container vtamay-cliente">
                    <input id="cliente" name="cliente" data-rule-validCustomer="true" data-cliente-id="" required type="text" value="" class="form-control" />
                    <a href="#" onclick="NuevoClienteModal(0)"><img src="~/Content/Images/addSign.png" title="Ingresar Nuevo Cliente" /></a>

                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(c => c.Vendedores)
                <div style="display:flex;">
                    @Html.DropDownListFor(c => c.Vendedores, new SelectList(Model.Vendedores, "Id", "Nombre"), new { @class = "form-control" }) &nbsp;&nbsp;
                    <a href="#" onclick="NuevoVendedorModal(0)"><img src="~/Content/Images/addSign.png" style="vertical-align:-webkit-baseline-middle;" title="Ingresar Nuevo Vendedor" /></a>
                </div>
                @Html.ValidationMessageFor(c => c.Vendedores)
            </div>

        </div>

        <!--Agrupamos campos de la columna derecha-->
        <div class="col-sm-6">
            <div class="form-group">
                <label>Saldo Anterior</label>
                @Html.TextBoxFor(c => c.SaldoAnterior, new { @class = "form-control" })
                @Html.ValidationMessageFor(c => c.SaldoAnterior)
            </div>

            <div class="form-group">
                <label>Entrega Efectivo</label>
                @Html.TextBoxFor(c => c.EntregaEfectivo, new { @class = "form-control" })
                @Html.ValidationMessageFor(c => c.EntregaEfectivo)
            </div>

            <div class="form-group">
                @Html.LabelFor(c => c.Saldo)
                @Html.TextBoxFor(c => c.Saldo, new { @class = "form-control" })
                @Html.ValidationMessageFor(c => c.Saldo)
            </div>

            <div class="form-group">
                <label>No Concretado</label>
                @Html.CheckBox("marcaConcretado", false)
                @Html.ValidationMessageFor(c => c.NoConcretado)
            </div>



        </div>

    </div>

    <div class="row">
        <div class="col-sm-12">
            <h3>Productos</h3>
        </div>
    </div>

    <div class="row">
        <div class="col-sm-12">

            <table class="table-bordered table-hover table order-list">
                <thead>
                    <tr>
                        <td>Producto</td>
                        <td>Cantidad</td>
                        <td>Unidad</td>
                        <td>Importe</td>
                        <td>Total Importe</td>
                        <td>Acciones</td>
                    </tr>
                </thead>
                <tbody>

                    @*<tr>
                        <td>
                            <div class="tt-container">
                                <input id="producto" name="producto" data-rule-validProducto="true" data-producto-id="" required type="text" value="" class="form-control" />
                            </div>
                        </td>
                        <td>
                            <div class="form-group">
                                <input id="cantidad" name="cantidad" required type="number" value="" class="form-control" />
                            </div>
                        </td>
                        <td>
                            <div class="form-group">
                                <select id="tiposdeunidad" class="form-control"><option value='' selected='selected'>Seleccione...</option></select>
                            </div>
                        </td>
                        <td>
                            <div class="form-group">
                                <input id="importe" name="importe" required type="number" value="" class="form-control" disabled />
                            </div>
                        </td>
                        <td>
                            <div class="form-group">
                                <input id="totalimporte" name="totalimporte" required type="number" value="" class="form-control" disabled />
                            </div>
                        </td>
                        <td class="">
                            <a class="deleteRow"></a>
                        </td>
                    </tr>*@

                </tbody>
                <tfoot>
                    <tr>
                        <td colspan="6" style="text-align: left;">
                            <input type="button" class="btn btn-lg btn-block " id="addrow" value="Agregar Producto" />
                        </td>
                    </tr>
                    <tr></tr>
                </tfoot>
            </table>

        </div>
    </div>

    <div class="row">
        <div class="col-sm-12">

            @Html.AntiForgeryToken()
            @Html.HiddenFor(c => c.ID)
            <button type="submit" class="btn btn-primary">Guardar</button>
            <button type="button" class="btn btn-danger" value="Cancelar" onclick="location.href='@Url.Action("Index", "Home")';">Cancelar</button>

        </div>
    </div>


}

<div class="modal fade" id="clienteModal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <a href="#" class="close" data-dismiss="modal">&times;</a>
                <h3 class="modal-title">Nuevo Cliente</h3>
            </div>
            <div class="modal-body" id="clienteModalBody">


            </div>


        </div>

    </div>

</div>

<div class="modal fade" id="vendedorModal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <a href="#" class="close" data-dismiss="modal">&times;</a>
                <h3 class="modal-title">Nuevo Vendedor</h3>
            </div>
            <div class="modal-body" id="vendedorModalBody">
            </div>
        </div>
    </div>
</div>




@section scripts
{



    <!--TAG SCRIPT PARA MODAL-->
    <script>

        var NuevoClienteModal = function (clienteID) {

            var url = "/VentaMayorista/NuevoCliente?ID=" + clienteID;

            $("#clienteModalBody").load(url, function () {
                $("#clienteModal").modal("show");

            })

        }

        var NuevoVendedorModal = function (vendedorID) {

            var url = "/VentaMayorista/NuevoVendedor?ID=" + vendedorID;

            $("#vendedorModalBody").load(url, function () {
                $("#vendedorModal").modal("show");

            })

        }

    </script>

    <script>

        $(document).ready(function () {            

            var counter = 0;
            
            //Asignamos primer valor al dropdown y luego populamos la lista async            
           // GetTiposDeUnidad();

            

            $("#addrow").on("click", function () {
                var newRow = $("<tr>");
                var cols = "";

               // $('#producto').typeahead('destroy');
                cols += '<td><div class="tt-container"><input id="producto' + counter + '" name="producto" data-rule-validProducto="true" data-producto-id="" required type="text" value="" class="form-control" /></div></td>';
                

                cols += '<td><div class="form-group"><input id="cantidad' + counter + '" name="cantidad" required type="number" value="" class="form-control" /></div></td>';
                
                cols += '<td><div class="form-group"><select id="tiposdeunidad' + counter + '" class="form-control" onChange="CalcularValorProducto(' + counter + ');"><option value="" selected="selected">Seleccione...</option></select></div></td>';
                GetTiposDeUnidadDynamic(counter);

                cols += '<td><div class="form-group"><input id="importe' + counter + '" name="importe" required type="number" value="" class="form-control" disabled /></div></td>';

                cols += '<td><div class="form-group"><input id="totalimporte' + counter + '" name="totalimporte" required type="number" value="" class="form-control" disabled /></div></td>';

                cols += '<td><input type="button" class="ibtnDel btn btn-md btn-danger "  value="Borrar"></td>';
                newRow.append(cols);
                $("table.order-list").append(newRow);

                typeahead_initialize(counter);

                counter++;
                
            });



            $("table.order-list").on("click", ".ibtnDel", function (event) {
                $(this).closest("tr").remove();
                counter -= 1
            });


            // Autocomplete para Cliente            
            var clientes = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('Nombre'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                prefetch: {
                    url: '/api/clientes?query=%QUERY',
                    wildcard: '%QUERY',
                    cache: false
                }
            });

            $('#cliente').typeahead({
                minLength: 3,
                highlight: true,
                hint: true,
                limit: Infinity
            }, {
                    name: 'cliente',
                    display: 'Nombre',
                    source: clientes
                }).on("typeahead:select", function (e, cliente) {

                    $("#cliente").attr("data-cliente-id", cliente.ID);

                });



        });

    </script>

    <!-- FUNCIONES -->
    <script>

        function typeahead_initialize(counter) {


            //Inicializacion necesaria para typeahead dinamicos

            var productos = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('Nombre'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                prefetch: {
                    url: '/api/productos?query=%QUERY',
                    wildcard: '%QUERY',
                    cache: false
                }
            });

            productos.initialize();

            $('#producto' + counter).typeahead({
                minLength: 3,
                highlight: true,
                hint: true,
                limit: Infinity
            }, {
                    name: 'producto',
                    display: 'Nombre',
                    source: productos
                }).on("typeahead:select", function (e, producto) {

                    $("#producto" + counter).attr("data-producto-id", producto.ID);

                });

        }

        typeahead_initialize();

        function CalcularValorProducto(counter) {

            var clienteID = $("#cliente").attr("data-cliente-id");
            var productoID = $("#producto" + counter).attr("data-producto-id");
            var cantidad = $("#cantidad" + counter).val();
            var tipoUnidadID = $("#tiposdeunidad" + counter + " option:selected").val();

            $.getJSON("CalcularValorProductoAsync", { ClienteID: clienteID, ProductoID: productoID, Cantidad: cantidad, TipoUnidadID: tipoUnidadID, Counter: counter }, ActualizarValores)
                .error(function (request, textStatus, errorThrown) { alert(errorThrown); })

        }

        ActualizarValores = function (data) {

            var importe = data.Importe;
            var importeTotal = data.ImporteTotal;

            $("#importe" + data.Counter).val(importe);
            $("#totalimporte" + data.Counter).val(importeTotal);
        }



        //function GetTiposDeUnidad() {

        //    $.getJSON("GetTiposDeUnidadAsync", {}, PopulateTiposDeUnidad)
        //        .error(function (request, textStatus, errorThrown) { alert(errorThrown); })

        //}

        //PopulateTiposDeUnidad = function (data) {
            
        //    $.each(data, function () {
        //        $("#tiposdeunidad").append($("<option />").val(this.ID).text(this.Nombre));
        //    });

        //}

        function GetTiposDeUnidadDynamic(counter) {

            $.getJSON("GetTiposDeUnidadDynamicAsync", { Counter: counter }, PopulateTiposDeUnidadDynamic)
                .error(function (request, textStatus, errorThrown) { alert(errorThrown); })

        }

        PopulateTiposDeUnidadDynamic = function (data) {

            $.each(data.TiposDeUnidad, function () {
                $("#tiposdeunidad" + data.Counter).append($("<option />").val(this.ID).text(this.Nombre));
            });

        }

    </script>

}
